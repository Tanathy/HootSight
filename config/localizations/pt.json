{
  "language_name": "Português",
  "activations": {
    "not_supported": "Ativação não suportada: {activation}. Opções disponíveis: {available}",
    "created": "Função de ativação criada com sucesso: {activation} com parâmetros {params}",
    "creation_failed": "Falha ao criar função de ativação: {error}",
    "invalid_params": "Parâmetros inválidos para função de ativação: {error}",
    "config_missing_type": "Falta 'type' na configuração de ativação",
    "recommendations_removed": "Recomendações de ativação removidas do sistema"
  },
  "augmentation": {
    "not_supported": "Aumento não suportado: {aug}. Opções disponíveis: {available}",
    "created": "Aumento criado com sucesso: {aug} com parâmetros {params}",
    "creation_failed": "Falha ao criar aumento: {error}",
    "invalid_params": "Parâmetros inválidos para aumento: {error}",
    "config_missing_type": "Falta 'type' na configuração de aumento",
    "preview_invalid_phase": "Fase de aumento inválida: {phase}",
    "preview_no_images": "Nenhuma imagem disponível para pré-visualização de aumento no projeto {project}.",
    "preview_failed": "Falha ao gerar pré-visualização de aumento: {error}",
    "preview_generated": "Pré-visualização de aumento gerada para fase {phase}"
  },
  "coordinator_settings": {
    "user_settings_saved": "Configurações do usuário salvas em {path}",
    "user_settings_save_failed": "Falha ao salvar configurações do usuário: {error}"
  },
  "recommendations": {
    "critical_shortage": "Escassez crítica de dados detectada em: {labels}",
    "reduce_oversampled": "Considere reduzir rótulos superamostrados: {labels}",
    "augment_undersampled": "Considere aumentar rótulos subamostrados: {labels}",
    "weighted_loss": "Considere usar funções de perda ponderadas",
    "stratified_sampling": "Considere amostragem estratificada",
    "hierarchical_imbalance": "Desequilíbrio hierárquico detectado em: {categories}",
    "small_dataset": "Conjunto de dados pequeno detectado - considere aumento de dados",
    "tiny_dataset": "Conjunto de dados muito pequeno detectado - alto risco de sobreajuste"
  },
  "losses": {
    "not_supported": "Função de perda não suportada: {loss}. Opções disponíveis: {available}",
    "created": "Função de perda criada com sucesso: {loss} com parâmetros {params}",
    "creation_failed": "Falha ao criar função de perda: {error}",
    "invalid_params": "Parâmetros inválidos para função de perda: {error}",
    "config_missing_type": "Falta 'type' na configuração de perda",
    "recommendations_removed": "Recomendações de perda removidas do sistema"
  },
  "normalization": {
    "not_supported": "Normalização não suportada: {norm}. Opções disponíveis: {available}",
    "missing_num_features": "Parâmetro 'num_features' faltando para {norm}",
    "missing_num_channels": "Parâmetro 'num_channels' faltando para {norm}",
    "missing_normalized_shape": "Parâmetro 'normalized_shape' faltando para {norm}",
    "created": "Camada de normalização criada com sucesso: {norm} com parâmetros {params}",
    "creation_failed": "Falha ao criar camada de normalização: {error}",
    "invalid_params": "Parâmetros inválidos para camada de normalização: {error}",
    "config_missing_type": "Falta 'type' na configuração de normalização",
    "recommendations_removed": "Recomendações de normalização removidas do sistema"
  },
  "optimizers": {
    "not_supported": "Otimizador não suportado: {optimizer}. Opções disponíveis: {available}",
    "created": "Otimizador criado com sucesso: {optimizer} com parâmetros {params}",
    "creation_failed": "Falha ao criar otimizador: {error}",
    "invalid_params": "Parâmetros inválidos para otimizador: {error}",
    "config_missing_type": "Falta 'type' na configuração de otimizador",
    "recommendations_removed": "Recomendações de otimizador removidas do sistema"
  },
  "pooling": {
    "not_supported": "Camada de pooling não suportada: {pool}. Opções disponíveis: {available}",
    "created": "Camada de pooling criada com sucesso: {pool} com parâmetros {params}",
    "creation_failed": "Falha ao criar camada de pooling: {error}",
    "invalid_params": "Parâmetros inválidos para camada de pooling: {error}",
    "config_missing_type": "Falta 'type' na configuração de pooling",
    "recommendations_removed": "Recomendações de pooling removidas do sistema"
  },
  "regularization": {
    "not_supported": "Regularização não suportada: {reg}. Opções disponíveis: {available}",
    "created": "Camada de regularização criada com sucesso: {reg} com parâmetros {params}",
    "creation_failed": "Falha ao criar camada de regularização: {error}",
    "invalid_params": "Parâmetros inválidos para camada de regularização: {error}",
    "config_missing_type": "Falta 'type' na configuração de regularização",
    "recommendations_removed": "Recomendações de regularização removidas do sistema"
  },
  "schedulers": {
    "not_supported": "Scheduler não suportado: {scheduler}. Opções disponíveis: {available}",
    "created": "Scheduler criado com sucesso: {scheduler} com parâmetros {params}",
    "creation_failed": "Falha ao criar scheduler: {error}",
    "invalid_params": "Parâmetros inválidos para scheduler: {error}",
    "config_missing_type": "Falta 'type' na configuração de scheduler",
    "recommendations_removed": "Recomendações de scheduler removidas do sistema"
  },
  "weight_init": {
    "not_supported": "Inicialização de pesos não suportada: {init}. Opções disponíveis: {available}",
    "applied": "Inicialização de pesos aplicada com sucesso: {init} em {module} com parâmetros {params}",
    "application_failed": "Falha ao aplicar inicialização de pesos: {error}",
    "invalid_params": "Parâmetros inválidos para inicialização de pesos: {error}",
    "recommendations_removed": "Recomendações de inicialização de pesos removidas do sistema"
  },
  "heatmap": {
    "no_images": "Nenhuma imagem encontrada para o projeto {project}",
    "checkpoint_missing": "Checkpoint do modelo não encontrado no diretório: {dir}",
    "project_or_dataset_missing": "Projeto {project} ou seu conjunto de dados não encontrado",
    "generated": "Heatmap gerada para {project} usando imagem {image} (classe {clazz})"
  },
  "app": {
    "brand": "Hootsight"
  },
  "nav": {
    "training_group": "Treinamento",
    "projects": "Projetos",
    "dataset": "Conjunto de Dados",
    "training_setup": "Configuração de Treinamento",
    "augmentation": "Aumento",
    "status_group": "Status",
    "status": "Status",
    "heatmap": "Heatmap",
    "memory": "Memória",
    "system_group": "Sistema",
    "updates": "Atualizações",
    "about": "Sobre"
  },
  "page": {
    "projects": "Projetos",
    "dataset": "Conjunto de Dados",
    "training": "Configuração de Treinamento",
    "augmentation": "Aumento",
    "status": "Status",
    "heatmap": "Heatmap",
    "memory": "Memória",
    "updates": "Atualizações",
    "about": "Sobre"
  },
  "config": {
    "sections": {
      "training": "Treinamento",
      "optimizers": "Otimizadores",
      "schedulers": "Schedulers",
      "losses": "Perdas",
      "models": "Modelos"
    },
    "entities": {
      "optimizers": {
        "sgd": "SGD (Stochastic Gradient Descent)",
        "adam": "Adam Optimizer",
        "adamw": "AdamW Optimizer",
        "adamax": "AdaMax",
        "nadam": "Nesterov Adam",
        "radam": "Rectified Adam",
        "rmsprop": "RMSprop",
        "rprop": "Resilient Backpropagation",
        "adagrad": "AdaGrad",
        "adadelta": "AdaDelta",
        "sparse_adam": "Sparse Adam",
        "lbfgs": "L-BFGS",
        "asgd": "Averaged SGD"
      },
      "schedulers": {
        "step_lr": "Step Learning Rate",
        "multi_step_lr": "Multi-Step Learning Rate",
        "exponential_lr": "Exponential Learning Rate",
        "cosine_annealing_lr": "Cosine Annealing",
        "cosine_annealing_warm_restarts": "Cosine Annealing with Warm Restarts",
        "reduce_lr_on_plateau": "Reduce LR on Plateau",
        "cyclic_lr": "Cyclic Learning Rate",
        "one_cycle_lr": "One Cycle Learning Rate",
        "polynomial_lr": "Polynomial Learning Rate",
        "linear_lr": "Linear Learning Rate",
        "lambda_lr": "Lambda Learning Rate",
        "multiplicative_lr": "Multiplicative Learning Rate"
      },
      "losses": {
        "cross_entropy": "Cross Entropy",
        "nll_loss": "Negative Log Likelihood Loss",
        "bce_loss": "Binary Cross Entropy Loss",
        "bce_with_logits": "BCE with Logits",
        "multi_margin": "Multi-Class Margin Loss",
        "multi_label_margin": "Multi-Label Margin Loss",
        "multi_label_soft_margin": "Multi-Label Soft Margin",
        "mse_loss": "Mean Squared Error Loss",
        "l1_loss": "L1 Loss (MAE)",
        "smooth_l1": "Smooth L1",
        "huber_loss": "Huber Loss",
        "kl_div": "KL Divergence",
        "margin_ranking": "Margin Ranking",
        "hinge_embedding": "Hinge Embedding",
        "triplet_margin": "Triplet Margin",
        "cosine_embedding": "Cosine Embedding",
        "ctc_loss": "CTC Loss",
        "poisson_nll": "Poisson NLL",
        "gaussian_nll": "Gaussian NLL"
      }
    }
  },
  "groups": {
    "model_settings": "Configurações do Modelo",
    "task_configuration": "Configuração da Tarefa",
    "training_parameters": "Parâmetros de Treinamento",
    "optimizer_settings": "Configurações do Otimizador",
    "scheduler_settings": "Configurações do Scheduler",
    "loss_configuration": "Configuração da Perda",
    "data_loading": "Carregamento de Dados",
    "normalization": "Normalização",
    "checkpointing": "Checkpointing",
    "weight_initialization": "Inicialização de Pesos"
  },
  "actions": {
    "save_config": "Salvar Configuração",
    "export": "Exportar",
    "save_training_config": "Salvar Configuração de Treinamento",
    "save_system_settings": "Salvar Configurações Globais"
  },
  "footer": {
    "tagline": "Configurado",
    "generated": "",
    "ready": "Pronto"
  },
  "field": {
    "training_model_type": "Tipo de Modelo",
    "training_model_name": "Nome do Modelo",
    "training_pretrained": "Pré-treinado",
    "training_task": "Tarefa",
    "training_batch_size": "Tamanho do Lote",
    "training_epochs": "Épocas",
    "training_learning_rate": "Taxa de Aprendizado",
    "training_weight_decay": "Decaimento de Peso",
    "training_input_size": "Tamanho de Entrada",
    "training_val_ratio": "Razão de Validação",
    "training_optimizer_type": "Tipo de Otimizador",
    "training_scheduler_type": "Tipo de Scheduler",
    "training_loss_type": "Tipo de Perda",
    "training_dataloader": "DataLoader",
    "training_dataloader_num_workers": "Número de Trabalhadores",
    "training_dataloader_pin_memory": "Fixar Memória",
    "training_dataloader_persistent_workers": "Trabalhadores Persistentes",
    "training_dataloader_prefetch_factor": "Fator de Pré-busca",
    "training_normalize": "Normalizar",
    "training_normalize_mean": "Média",
    "training_normalize_std": "Desvio Padrão",
    "training_checkpoint": "Checkpoint",
    "training_checkpoint_save_best_only": "Salvar Apenas Melhor",
    "training_checkpoint_save_frequency": "Frequência de Salvamento",
    "training_checkpoint_max_checkpoints": "Máx Checkpoints",
    "training_checkpoint_checkpoint_dir": "Diretório de Checkpoint",
    "training_checkpoint_best_model_filename": "Nome do Arquivo do Melhor Modelo",
    "training_checkpoint_training_history_filename": "Nome do Arquivo do Histórico de Treinamento",
    "training_weight_init": "Init de Peso",
    "training_weight_init_type": "Tipo de Init",
    "training_weight_init_params": "Parâmetros de Init",
    "training_optimizer_params_adamw_lr": "Taxa de Aprendizado",
    "training_optimizer_params_adamw_betas": "Betas",
    "training_optimizer_params_adamw_eps": "Eps",
    "training_optimizer_params_adamw_weight_decay": "Decaimento de Peso",
    "training_optimizer_params_adamw_amsgrad": "Amsgrad",
    "training_scheduler_params_step_lr_step_size": "Tamanho do Passo",
    "training_scheduler_params_step_lr_gamma": "Gamma",
    "training_scheduler_params_step_lr_last_epoch": "Última Época",
    "training_loss_params_bce_with_logits_weight": "Peso",
    "training_loss_params_bce_with_logits_size_average": "Média de Tamanho",
    "training_loss_params_bce_with_logits_reduce": "Reduzir",
    "training_loss_params_bce_with_logits_reduction": "Redução",
    "training_loss_params_bce_with_logits_pos_weight": "Peso Positivo"
  },
  "ui": {
    "generate_heatmap": "Gerar Heatmap",
    "no_heatmap_generated": "Nenhum heatmap foi gerado ainda.",
    "no_data_available": "Nenhum dado disponível.",
    "page_not_implemented": "Página não implementada",
    "error": "Erro",
    "schema_not_loaded": "Esquema ainda não carregado. Por favor aguarde...",
    "config_not_loaded": "Configuração ainda não carregada. Por favor aguarde...",
    "augmentation_phase": "Aumento {phase}",
    "add": "Adicionar",
    "remove": "Remover",
    "transform": "transformar",
    "no_project_loaded": "Nenhum projeto carregado",
    "load_project_first": "Por favor carregue um projeto primeiro na aba Projetos.",
    "go_to_projects": "Ir para Projetos",
    "dataset_overview": "Visão Geral do Conjunto de Dados",
    "balance_analysis": "Análise de Equilíbrio",
    "label_distribution": "Distribuição de Rótulos (Top 20)",
    "recommendations": "Recomendações",
    "failed_to_load_dataset": "Falha ao carregar informações do conjunto de dados.",
    "current_project": "PROJETO ATUAL",
    "load": "Carregar",
    "start_training": "Iniciar Treinamento",
    "stop_training": "Parar Treinamento",
    "stop_training_disabled": "Nenhum treinamento ativo para este projeto para parar.",
    "training_in_progress": "Treinamento em andamento",
    "memory": "Memória",
    "loading": "Carregando...",
    "training_status": "Status do Treinamento",
    "idle": "Ocioso",
    "prediction": "Predição",
    "predictions": "Predições",
    "no_predictions_above_threshold": "Nenhuma predição acima do limiar",
    "image": "Imagem",
    "checkpoint": "Checkpoint",
    "auto": "auto",
    "value": "valor",
    "one_number_per_line": "Um número por linha",
    "empty_object": "Objeto vazio",
    "language_warning": "Mudar idioma reiniciará o sistema",
    "language_select_title": "Selecionar Idioma",
    "not_available": "N/A",
    "unknown": "Desconhecido",
    "configuration_empty": "Nenhuma seção de configuração disponível",
    "configuration_schema_missing": "Esquema de configuração ainda não carregado."
  },
  "augmentation_ui": {
    "page_title": "Aumento de Dados",
    "page_description": "Configure transformações de imagem para melhorar a generalização e robustez do modelo.",
    "train_title": "Aumentos de Treinamento",
    "train_description": "Aplicados durante o treinamento para aumentar a diversidade visual mantendo os rótulos.",
    "val_title": "Aumentos de Validação",
    "val_description": "Aplicados durante a validação para avaliação determinística.",
    "toggle_help": "Alterne o aumento para ligar ou desligar para esta fase.",
    "no_options": "Nenhuma opção de aumento disponível.",
    "custom_warning": "As seguintes transformações são preservadas, mas não podem ser editadas aqui:",
    "unknown_transform": "Transformação desconhecida",
    "random_resized_crop": "Corte Redimensionado Aleatório",
    "random_resized_crop_description": "Corta e redimensiona a imagem aleatoriamente para o tamanho alvo respeitando intervalos de escala e proporção de aspecto.",
    "random_horizontal_flip": "Inversão Horizontal Aleatória",
    "random_horizontal_flip_description": "Inverte a imagem horizontalmente com probabilidade configurada para variações esquerda-direita.",
    "random_vertical_flip": "Inversão Vertical Aleatória",
    "random_vertical_flip_description": "Inverte a imagem verticalmente para mudanças de perspectiva cima-baixo.",
    "random_rotation": "Rotação Aleatória",
    "random_rotation_description": "Aplica rotação aleatória dentro do intervalo definido de graus para reduzir viés de orientação.",
    "color_jitter": "Variação de Cor",
    "color_jitter_description": "Varia aleatoriamente brilho, contraste, saturação e matiz para melhorar a robustez de cor.",
    "random_grayscale": "Escala de Cinza Aleatória",
    "random_grayscale_description": "Converte imagens para escala de cinza com probabilidade configurada para reconhecimento de luminância.",
    "random_erasing": "Apagamento Aleatório",
    "random_erasing_description": "Mascara regiões retangulares aleatoriamente para aumentar a robustez espacial e raciocínio de completude de objetos.",
    "random_perspective": "Perspectiva Aleatória",
    "random_perspective_description": "Aplica transformação de perspectiva aleatória usando escala de distorção e probabilidade.",
    "center_crop": "Corte Central",
    "center_crop_description": "Corta a região central para o tamanho alvo para entradas de validação consistentes.",
    "random_resized_crop.size_label": "Tamanho de Saída",
    "random_resized_crop.size_description": "Comprimento da borda em pixels após redimensionar o corte.",
    "random_resized_crop.scale_min_label": "Escala Mínima",
    "random_resized_crop.scale_min_description": "Limite inferior para escala de área relativa à imagem original (0-1).",
    "random_resized_crop.scale_max_label": "Escala Máxima",
    "random_resized_crop.scale_max_description": "Limite superior para escala de área relativa à imagem original.",
    "random_resized_crop.ratio_min_label": "Proporção de Aspecto Mínima",
    "random_resized_crop.ratio_min_description": "Limite inferior para proporção de aspecto amostrada antes do redimensionamento.",
    "random_resized_crop.ratio_max_label": "Proporção de Aspecto Máxima",
    "random_resized_crop.ratio_max_description": "Limite superior para proporção de aspecto amostrada antes do redimensionamento.",
    "random_horizontal_flip.p_label": "Probabilidade de Inversão",
    "random_horizontal_flip.p_description": "Probabilidade de a imagem ser espelhada horizontalmente.",
    "random_vertical_flip.p_label": "Probabilidade de Inversão",
    "random_vertical_flip.p_description": "Probabilidade de a imagem ser invertida verticalmente.",
    "random_rotation.min_label": "Graus Mínimos",
    "random_rotation.min_description": "Limite inferior de rotação em graus (valores negativos rotacionam no sentido horário).",
    "random_rotation.max_label": "Graus Máximos",
    "random_rotation.max_description": "Limite superior de rotação em graus (valores positivos rotacionam no sentido anti-horário).",
    "color_jitter.brightness_label": "Variação de Brilho",
    "color_jitter.brightness_description": "Quantidade máxima de mudança de brilho adicionada a cada canal.",
    "color_jitter.contrast_label": "Variação de Contraste",
    "color_jitter.contrast_description": "Escala máxima de contraste aplicada à imagem.",
    "color_jitter.saturation_label": "Variação de Saturação",
    "color_jitter.saturation_description": "Mudança máxima de saturação aplicada no espaço HSV.",
    "color_jitter.hue_label": "Variação de Matiz",
    "color_jitter.hue_description": "Intervalo máximo de mudança de matiz (0-0.5).",
    "random_grayscale.p_label": "Probabilidade de Escala de Cinza",
    "random_grayscale.p_description": "Probabilidade de a imagem ser convertida para escala de cinza.",
    "random_erasing.p_label": "Probabilidade de Apagamento",
    "random_erasing.p_description": "Probabilidade de uma região aleatória ser apagada na imagem.",
    "random_erasing.scale_min_label": "Escala Mínima",
    "random_erasing.scale_min_description": "Limite inferior para escala de área relativa da região apagada à imagem inteira.",
    "random_erasing.scale_max_label": "Escala Máxima",
    "random_erasing.scale_max_description": "Limite superior para escala de área relativa da região apagada à imagem inteira.",
    "random_erasing.ratio_min_label": "Proporção de Aspecto Mínima",
    "random_erasing.ratio_min_description": "Limite inferior para proporção de aspecto do patch apagado.",
    "random_erasing.ratio_max_label": "Proporção de Aspecto Máxima",
    "random_erasing.ratio_max_description": "Limite superior para proporção de aspecto do patch apagado.",
    "random_erasing.value_label": "Valor de Preenchimento",
    "random_erasing.value_description": "Valor de pixel usado para preencher a região apagada (0-1).",
    "random_erasing.inplace_label": "No Local",
    "random_erasing.inplace_description": "Aplicar apagamento diretamente no tensor de entrada sem alocar uma cópia.",
    "random_perspective.distortion_scale_label": "Escala de Distorção",
    "random_perspective.distortion_scale_description": "Controla a força da distorção de perspectiva (0-1).",
    "random_perspective.p_label": "Probabilidade de Perspectiva",
    "random_perspective.p_description": "Probabilidade de aplicar distorção de perspectiva aleatória.",
    "center_crop.size_label": "Tamanho do Corte",
    "center_crop.size_description": "Comprimento da borda alvo em pixels para corte central.",
    "preview_section_title": "Pré-visualização",
    "preview_description": "Aplica o pipeline atual a uma imagem aleatória do conjunto de dados.",
    "preview_button": "Mostrar Pré-visualização",
    "preview_idle": "Clique em Mostrar Pré-visualização para uma imagem aumentada.",
    "preview_loading": "Gerando pré-visualização...",
    "preview_no_project": "Carregue um projeto para pré-visualizar aumentos.",
    "preview_empty_pipeline": "Configure pelo menos uma transformação para pré-visualização.",
    "preview_generic_error": "Falha ao gerar pré-visualização.",
    "preview_original_label": "Original",
    "preview_augmented_label": "Aumentado",
    "preview_image_path_label": "Caminho da Imagem"
  },
  "about_ui": {
    "page_title": "Sobre o Hootsight",
    "page_description": "Entenda o propósito, arquitetura central e princípios de desenvolvimento que moldam o Hootsight.",
    "card_title": "Ferramenta offline de aumento de imagens para treinamento",
    "intro": "Hootsight é uma ferramenta offline de classificação de imagens que combina treinamento PyTorch com UI configurável.",
    "content_markdown": "## Sobre o Hootsight\n\nOi, sou Tanathy! A única desenvolvedora mantendo o Hootsight funcionando. Eu o criei porque queria uma ferramenta confiável de classificação de imagens offline na qual pudesse confiar no meu próprio hardware, e pensei que outros também mereciam essa liberdade.\n\n### Filosofia\n- Seus dados nunca deixam sua máquina, a menos que você mesmo os mova. Sem tarefas de sincronização em segundo plano ou chamadas de nuvem surpresa.\n- Recuso-me a enviar telemetria ou hooks de rastreamento. O diagnóstico permanece local, para que você possa decidir o que compartilhar.\n- Toda configuração vive em JSON. Versione, compare, implante no Git—tudo o que mantém seu fluxo de trabalho honesto.\n- O instalador configura um ambiente virtual isolado que mantém seu Python global limpo.\n- Pesos pré-treinados vivem em `cache/`, para que você possa fazer backup, auditar ou queimar em segundos.\n- Mapas de estrada seguem vida real. Versões saem quando tenho largura de banda, não quando o sprint board diz para frente.\n- Ferramentas são neutras; como você as usa é o que importa. Espero que todos nós, eu incluída, as usemos com cuidado.\n\n>Disclaimer: Cada conjunto de dados que você ingere, cada rótulo que você prevê e cada modelo que você exporta é sua responsabilidade. Seja consciente do consentimento, legalidade e pessoas afetadas pelo seu trabalho.\n\n### Estado do Desenvolvimento\n- Hootsight está firmemente em alfa. Espere atualizações, experimentos e ocasionalmente bordas ásperas.\n- ResNet tem validação end-to-end completa. ResNeXt, EfficientNet e outras arquiteturas estão em testes de longo prazo quando o tempo permite.\n- Encontrou um bug? Por favor registre no [GitHub Issues](https://github.com/Tanathy/HootSight/issues). Relatórios claros me ajudam a corrigir as coisas mais rápido.\n\n### Fundamentos Técnicos\n- **Backend**: Serviços FastAPI coordenam descoberta de conjunto de dados, orquestração de treinamento e endpoints de estado.\n- **Núcleo ML**: PyTorch lida com loops de treinamento, inferência e pipelines de aumento.\n- **Frontend**: UI web leve HTML/JS/CSS suportada por biblioteca auxiliar básica (`qte.js`) em vez de framework pesado.\n- **Configuração**: Tudo é configurável—sem valores padrão ocultos no código.\n- **Operação Offline**: A aplicação funciona sem acesso à internet. Verificações de atualização opcionais chamam GitHub apenas quando você quiser.\n- **Gerenciamento de Memória**: Utilitários personalizados ajustam tamanhos de lote em tempo real e monitoram uso de GPU/CPU para prevenir erros OOM.\n- **Manipulação de Dados**: Projetos, conjuntos de dados, checkpoints e logs permanecem sob seu controle do sistema de arquivos. Sem sincronização automática, sem espelhamento remoto.\n\n### Privacidade e Conformidade\n- Projetado com expectativas de GDPR em mente: sem dados pessoais deixando seu ambiente por padrão.\n- Você decide o que importar e mantém controle total sobre modificações, exportações ou exclusões.\n- Configurações, logs e checkpoints permanecem no disco, a menos que explicitamente compartilhados.\n- Verificações de atualização são opt-in e transmitem apenas metadados de solicitação; conteúdo do projeto não vai com elas.\n- Se manipular categorias sensíveis (biométricas, médicas, qualquer coisa regulamentada), mapeie essas obrigações contra suas próprias políticas antes de treinar.\n- Sem SDKs de analytics, reportadores de crash ou trackers de terceiros incluídos na aplicação.\n\n### Suporte\nEstou feliz em compartilhar este projeto para seu uso. Se você quiser apoiar meu trabalho, pode me comprar um café no [ko-fi.com/tanathy](https://ko-fi.com/tanathy).\n\n### Licença e Créditos\nHootsight vem com fonte [Roboto](https://fonts.google.com/specimen/Roboto/license), distribuída sob Open Font License, Version 1.1."
  },
  "training_ui": {
    "page_title": "Configuração de Treinamento",
    "page_description": "Configure arquitetura do modelo, parâmetros de treinamento e configurações de otimização.",
    "optimizer_params_title": "Parâmetros do Otimizador",
    "scheduler_params_title": "Parâmetros do Scheduler",
    "loss_params_title": "Parâmetros da Perda",
    "select_type_first": "Selecione um tipo primeiro para ver parâmetros.",
    "no_extra_params": "Nenhum parâmetro adicional para esta seleção."
  },
  "dataset_ui": {
    "page_title": "Conjunto de Dados",
    "page_description": "Explore e analise a estrutura do seu conjunto de dados, rótulos e distribuição de dados.",
    "summary": {
      "project": "Projeto",
      "dataset_type": "Tipo de Conjunto de Dados",
      "total_images": "Total de Imagens",
      "total_labels": "Total de Rótulos",
      "balance_status": "Status de Equilíbrio",
      "balance_score": "Pontuação de Equilíbrio",
      "images_per_label_ideal": "Imagens por Rótulo (Ideal)",
      "min_images": "Mín Imagens",
      "max_images": "Máx Imagens",
      "max_min_ratio": "Razão Máx/Mín"
    },
    "table": {
      "label": "Rótulo",
      "count": "Contagem",
      "percentage": "Porcentagem"
    }
  },
  "projects_ui": {
    "page_title": "Projetos",
    "page_description": "Gerencie e alterne entre diferentes projetos e conjuntos de dados de ML.",
    "card": {
      "images": "Imagens",
      "labels": "Rótulos",
      "balance_score": "Pontuação de Equilíbrio",
      "balance_status": "Equilíbrio",
      "dataset_type": "Tipo de Conjunto de Dados",
      "status": {
        "balanced": "Equilibrado",
        "imbalanced": "Desequilibrado",
        "critical": "Crítico",
        "warning": "Aviso",
        "good": "Bom",
        "poor": "Ruim",
        "excellent": "Excelente",
        "fair": "Justo",
        "ok": "OK",
        "unstable": "Instável"
      }
    }
  },
  "status_ui": {
    "page_title": "Status",
    "page_description": "Monitore progresso do treinamento, estado do sistema e métricas de desempenho em tempo real."
  },
  "heatmap_ui": {
    "page_title": "Heatmap",
    "page_description": "Gere e visualize mapas de atenção do modelo para entender áreas de foco da predição."
  },
  "memory_ui": {
    "page_title": "Memória",
    "page_description": "Monitore uso de memória do sistema e otimize tamanhos de lote para treinamento eficiente."
  },
  "environment": {
    "venv_creating": "Criando ambiente virtual em {path}...",
    "venv_created": "Ambiente virtual pronto.",
    "venv_create_failed": "Criação do ambiente virtual falhou: {error}",
    "venv_exists": "Ambiente virtual já existe.",
    "pip_upgrading": "Atualizando pip no ambiente virtual...",
    "pip_upgraded": "Atualização do pip concluída.",
    "pip_upgrade_failed": "Atualização do pip falhou: {error}",
    "cuda_debug_nvcc": "Saída do nvcc --version:\n{output}",
    "cuda_debug_nvcc_error": "Falha ao detectar nvcc: {error}",
    "cuda_debug_nvidia_smi": "Saída do nvidia-smi:\n{output}",
    "cuda_debug_nvidia_smi_error": "Falha ao detectar nvidia-smi: {error}",
    "cuda_debug_detected": "Versão CUDA detectada: {version}",
    "pytorch_install": "Instalando PyTorch para CUDA {cuda} no {platform}...",
    "pytorch_installed": "Instalação do PyTorch concluída.",
    "pytorch_install_failed": "Instalação do PyTorch falhou: {error}",
    "xformers_already_installed": "xFormers já está instalado e atualizado.",
    "xformers_installing": "Instalando xFormers (CUDA {cuda_version})...",
    "xformers_installed": "Instalação do xFormers concluída.",
    "xformers_install_failed": "Instalação do xFormers falhou: {error}",
    "pytorch_skip": "Pulando instalação do PyTorch (CUDA={cuda} detectado, plataforma={platform}).",
    "config_loading": "Carregando configuração do ambiente...",
    "config_loaded": "Configuração do ambiente carregada.",
    "using_compatible_xformers": "Usando índice CUDA {cuda_version} para xFormers.",
    "env_packages_all_installed": "Pacotes do ambiente já estão instalados.",
    "env_packages_progress_desc": "Instalando pacotes do ambiente",
    "env_package_installing": "Instalando pacote do ambiente {package}...",
    "env_package_installed": "Pacote do ambiente instalado: {package}",
    "env_package_install_failed": "Falha ao instalar pacote do ambiente {package}: {error}",
    "env_vars_configured": "Variáveis de ambiente {count} preparadas para processo de treinamento.",
    "env_vars_config_failed": "Falha ao configurar variáveis de ambiente: {error}",
    "entry_not_found": "Script de entrada não encontrado em {path}.",
    "venv_python_not_found": "Executável Python do ambiente virtual faltando: {path}.",
    "venv_python_test_failed": "Python do ambiente virtual falhou no teste --version: {error}",
    "re_exec_starting": "Iniciando treinamento via {venv_python} -> {entry_py} (raiz {root}).",
    "re_exec_timeout": "Re-exec expirou.",
    "re_exec_failed": "Falha ao iniciar processo de treinamento: {error}",
    "re_exec_unexpected_error": "Erro inesperado ao iniciar processo de treinamento: {error}"
  },
  "updates_ui": {
    "page_title": "Atualizações do Sistema",
    "page_description": "Mantenha sua instalação sincronizada com o repositório upstream sem sobrescrever substituições de configuração específicas do projeto.",
    "card_title": "Gerenciador de Atualizações",
    "intro": "Compare arquivos locais com o repositório de referência e sincronize patches faltantes mantendo config.json intocado.",
    "check_button": "Verificar Atualizações",
    "apply_button": "Aplicar Atualizações",
    "apply_disabled_hint": "Execute uma verificação para ativar atualizações.",
    "status_idle": "Nenhuma verificação de atualização executada ainda.",
    "status_checking": "Verificando atualizações...",
    "status_ready": "Resumo de atualizações pronto.",
    "status_up_to_date": "Tudo está atualizado.",
    "status_failed": "Verificação de atualizações falhou.",
    "status_applying": "Aplicando arquivos...",
    "status_applied": "Atualizações aplicadas com sucesso.",
    "status_apply_failed": "Algumas atualizações falharam.",
    "table_header_file": "Arquivo",
    "table_header_status": "Status",
    "table_header_local": "Local",
    "table_header_remote": "Remoto",
    "table_row_missing": "Faltando localmente",
    "table_row_outdated": "Checksum incompatível",
    "table_footnote": "Hashes abreviados para legibilidade.",
    "no_updates": "Todos os arquivos rastreados estão atualizados.",
    "hash_missing": "—",
    "orphaned_title": "Arquivos locais não rastreados",
    "orphaned_none": "Nenhum arquivo extra local detectado."
  },
  "schema": {
    "description": "JSON Schema for Hootsight config.json - defines types, ranges, and hierarchical structure for all configurable settings",
    "general_description": "General application settings",
    "general_language_description": "UI language code",
    "api_description": "API server configuration",
    "api_host_description": "API server host",
    "api_port_description": "API server port",
    "ui_description": "User interface settings",
    "ui_title_description": "Application window title",
    "ui_width_description": "Window width in pixels",
    "ui_height_description": "Window height in pixels",
    "ui_resizable_description": "Whether the window is resizable",
    "system_description": "System-level settings",
    "system_max_threads_description": "Maximum number of threads",
    "system_fallback_batch_size_description": "Fallback batch size when auto-calculation fails",
    "system_memory_cleanup_interval_description": "Memory cleanup interval in seconds",
    "system_thread_pool_timeout_description": "Thread pool timeout in seconds",
    "system_startup_wait_seconds_description": "Startup wait time in seconds",
    "memory_description": "Memory management settings",
    "memory_target_memory_usage_description": "Target memory usage ratio (0.0-1.0)",
    "memory_safety_margin_description": "Safety margin for memory calculations (0.0-1.0)",
    "memory_augmentation_threads_description": "Number of threads for data augmentation",
    "training_description": "Training configuration",
    "training_model_type_description": "Type of model to use",
    "training_model_name_description": "Specific model name",
    "training_pretrained_description": "Initializes the network with ImageNet pretrained weights when available; disable to train from scratch",
    "training_task_description": "Machine learning task type",
    "training_batch_size_description": "Batch size for training",
    "training_epochs_description": "Number of training epochs",
    "training_learning_rate_description": "Learning rate",
    "training_weight_decay_description": "Weight decay (L2 regularization)",
    "training_input_size_description": "Edge length in pixels for the square input tensor (must stay consistent with your augmentation resizing)",
    "training_normalize_description": "Image normalization parameters",
    "training_normalize_mean_description": "Mean values for RGB channels",
    "training_normalize_std_description": "Standard deviation values for RGB channels",
    "training_val_ratio_description": "Validation split ratio (0.0-1.0)",
    "training_dataloader_description": "DataLoader configuration",
    "training_dataloader_num_workers_description": "Number of worker processes",
    "training_dataloader_pin_memory_description": "Whether to pin memory for faster GPU transfer",
    "training_dataloader_persistent_workers_description": "Whether to keep workers alive between epochs",
    "training_dataloader_prefetch_factor_description": "Number of batches to prefetch per worker",
    "training_augmentation_description": "Data augmentation configuration",
    "training_augmentation_train_description": "Training augmentations",
    "training_augmentation_val_description": "Validation augmentations",
    "training_optimizer_type_description": "Optimizer type",
    "training_optimizer_params_description": "Optimizer parameters",
    "training_scheduler_type_description": "Learning rate scheduler type",
    "training_scheduler_params_description": "Scheduler parameters",
    "training_loss_type_description": "Loss function type",
    "training_loss_params_description": "Loss function parameters",
    "training_weight_init_description": "Weight initialization configuration",
    "training_checkpoint_description": "Checkpoint configuration",
    "training_early_stopping_description": "Early stopping configuration",
    "training_gradient_description": "Gradient configuration",
    "training_runtime_description": "Runtime performance optimization settings",
    "training_runtime_mixed_precision_description": "Enable automatic mixed precision training",
    "training_runtime_channels_last_description": "Use channels-last memory format for better GPU utilization",
    "training_runtime_allow_tf32_description": "Enable TF32 for faster matrix operations on Ampere+ GPUs",
    "training_runtime_cudnn_benchmark_description": "Enable cuDNN benchmark for optimized convolution algorithms",
    "dataset_description": "Dataset configuration",
    "dataset_image_extensions_description": "Supported image file extensions",
    "optimizers_description": "Optimizer defaults override",
    "optimizers_defaults_description": "Default parameters for optimizers",
    "schedulers_description": "Scheduler defaults override",
    "schedulers_defaults_description": "Default parameters for schedulers",
    "schedulers_defaults_lambda_lr_lr_lambda_description": "Lambda function as string, e.g., 'lambda epoch: 0.95 ** epoch'",
    "schedulers_defaults_multiplicative_lr_lr_lambda_description": "Lambda function as string, e.g., 'lambda epoch: 0.95'",
    "losses_description": "Loss defaults override",
    "losses_defaults_description": "Default parameters for losses",
    "models_description": "Model configurations",
    "models_resnet_description": "ResNet model family settings",
    "models_resnet_variants_description": "ResNet variants configuration",
    "models_resnext_description": "ResNeXt model family settings",
    "models_resnext_variants_description": "ResNeXt variants configuration",
    "models_mobilenet_description": "MobileNet model family settings",
    "models_mobilenet_variants_description": "MobileNet variants configuration",
    "models_shufflenet_description": "ShuffleNet model family settings",
    "models_shufflenet_variants_description": "ShuffleNet variants configuration",
    "models_squeezenet_description": "SqueezeNet model family settings",
    "models_squeezenet_variants_description": "SqueezeNet variants configuration",
    "models_efficientnet_description": "EfficientNet model family settings",
    "models_efficientnet_variants_description": "EfficientNet variants configuration",
    "models_supported_types_description": "Supported model types",
    "general_language_enum_descriptor": {
      "en": "English language - Controls the entire user interface localization including menu labels, error messages, tooltips, and validation text. Affects all text rendering in the web interface and API responses. Determines language pack loading at application startup. Currently the only supported language option, making it the default for all deployments."
    },
    "system_max_threads_enum_descriptor": {
      "auto": "Automatic thread count - Dynamically calculates optimal thread pool size based on available CPU cores (typically cores - 1). Affects parallel data loading, image preprocessing, model inference batching, and background task processing. Controls thread allocation for PyTorch DataLoader workers, image augmentation pipelines, and concurrent HTTP request handling. Automatically scales with hardware capabilities and adjusts based on available system memory."
    },
    "memory_augmentation_threads_enum_descriptor": {
      "auto": "Automatic augmentation thread count - Calculates optimal thread count for parallel image augmentation based on CPU cores and available RAM. Affects image transformation pipeline throughput including rotation, scaling, color jittering, and normalization operations. Controls memory allocation for augmentation buffers and intermediate image storage. Balances CPU utilization against memory pressure to prevent system overload during intensive preprocessing phases."
    },
    "training_model_type_enum_descriptor": {
      "resnet": "ResNet (Residual Network) - Deep convolutional neural network using skip connections to enable training of very deep networks (18-152 layers). Affects gradient flow, training stability, feature representation depth, and model capacity. Uses residual blocks with batch normalization and ReLU activation. Controls architectural complexity from 11M parameters (ResNet-18) to 60M parameters (ResNet-152). Influences memory usage, training time, inference speed, and final model accuracy across image classification tasks.",
      "resnext": "ResNeXt (Aggregated Residual Transformations) - ResNet evolution using cardinality (grouped convolutions) to increase model capacity without significantly increasing parameter count. Affects feature learning diversity, model expressiveness, and computational efficiency. Controls parallel transformation pathways within each residual block. Impacts GPU memory usage, training duration, and achieves higher accuracy than standard ResNet with similar computational cost.",
      "mobilenet": "MobileNet - Lightweight CNN using depthwise separable convolutions to reduce model size and computational requirements. Affects inference latency, energy consumption, model storage size, and deployment feasibility on mobile devices. Controls trade-off between accuracy and efficiency through width multiplier and resolution parameters. Impacts battery life in mobile applications, real-time processing capability, and edge device compatibility.",
      "shufflenet": "ShuffleNet - Extremely efficient CNN using channel shuffle operations and pointwise group convolutions. Affects memory bandwidth utilization, computational cost per inference, model size, and processing speed. Controls channel communication between group convolutions to maintain information flow. Optimized for ARM processors and low-power devices. Impacts real-time performance requirements and resource-constrained deployment scenarios.",
      "squeezenet": "SqueezeNet - Ultra-compact CNN using Fire modules (squeeze + expand layers) to achieve AlexNet-level accuracy with 50x fewer parameters. Affects model storage requirements, download time, cache efficiency, and deployment bandwidth. Controls parameter count through aggressive dimensionality reduction followed by expansion. Minimizes disk footprint while maintaining reasonable accuracy for basic classification tasks.",
      "efficientnet": "EfficientNet - Compound scaling CNN that uniformly scales network depth, width, and resolution using neural architecture search. Affects computational efficiency, accuracy scaling, training resource requirements, and inference optimization. Controls model complexity through compound coefficient that balances all three dimensions simultaneously. Provides superior accuracy-efficiency trade-offs compared to traditional scaling methods."
    },
    "training_task_enum_descriptor": {
      "classification": "Single-label Classification - Assigns exactly one mutually exclusive class label to each input image. Affects final layer architecture (softmax activation), loss function selection (categorical cross-entropy), output dimensionality (number of classes), and prediction confidence interpretation. Controls model decision boundaries, class probability distribution, and training convergence patterns. Requires balanced dataset distribution and clear class separability for optimal performance.",
      "multi_label": "Multi-label Classification - Assigns zero, one, or multiple non-exclusive class labels simultaneously to each input image. Affects output layer activation (sigmoid per class), loss function composition (binary cross-entropy per label), threshold selection for positive predictions, and evaluation metrics (F1-score, mAP). Controls independent class prediction pathways, label correlation handling, and imbalanced class weight strategies. Handles complex real-world scenarios where images contain multiple semantic concepts.",
      "detection": "Object Detection - Simultaneously localizes and classifies multiple object instances within images using bounding box predictions. Affects model architecture complexity (feature pyramid networks, anchor generation), loss function composition (classification + bounding box regression), training data requirements (annotated bounding boxes), post-processing pipeline (non-maximum suppression), and computational overhead. Controls spatial feature extraction depth, multi-scale object recognition, region proposal mechanisms, and intersection-over-union calculations.",
      "segmentation": "Semantic Segmentation - Performs dense pixel-wise classification to assign semantic class labels to every pixel in the input image. Affects memory requirements (full-resolution feature maps), model architecture (encoder-decoder with skip connections), loss function design (pixel-wise cross-entropy, focal loss for class imbalance), training complexity (handling class imbalance at pixel level), and output resolution constraints. Controls upsampling strategies, boundary refinement quality, spatial precision, and contextual reasoning capabilities."
    },
    "training_epochs_enum_descriptor": {
      "auto": "Automatic epoch determination - Monitors validation loss and accuracy trends to determine optimal training duration using early stopping criteria. Affects total training time, model convergence quality, computational resource usage, and overfitting prevention. Tracks validation metric improvements over patience periods and automatically terminates training when no significant progress is detected. Balances training thoroughness against computational efficiency."
    },
    "training_optimizer_type_enum_descriptor": {
      "sgd": "Stochastic Gradient Descent - Deterministic gradient step with optional momentum and Nesterov lookahead. Exposes learning_rate, momentum, dampening, and weight_decay as the critical knobs. Works best when you can pre-plan a scheduler and want tight control over generalization. Expect strong results on large vision datasets when paired with cosine or step decay, but be ready to tune momentum (0.9 is a typical starting point) and keep learning rates in the 0.01-0.1 range depending on batch size.",
      "adam": "Adam Optimizer - Adaptive first-order method that stores moving averages of gradients (beta1) and squared gradients (beta2). Default betas of 0.9/0.999 and eps of 1e-8 suit most workloads. Handles noisy or sparse gradients without manual learning rate scaling, which makes it a reliable baseline for classification and transfer learning. Watch for sluggish convergence if weight decay is coupled to Adam's adaptive updates; consider AdamW when regularization matters.",
      "adamw": "AdamW Optimizer - Decouples weight decay from Adam's adaptive updates so L2 regularization behaves as intended. Keeps the same beta parameters and epsilon defaults as Adam while exposing weight_decay as a true regularizer. Preferred for vision transformers, ResNet fine-tuning, or any model where you care about stable training with predictable generalization. Start with weight_decay around 0.01 and tune learning_rate between 3e-5 and 3e-4 for transfer learning scenarios.",
      "adamax": "AdaMax Optimizer - Adam variant using the infinity norm for second moment tracking. Similar hyperparameters to Adam, but more resilient when gradients have sporadic spikes. Useful when Adam becomes unstable due to extreme gradient magnitudes, particularly in GAN or reinforcement workloads. Keep beta2 near 0.999 and treat learning_rate like standard Adam; expect slightly slower convergence but fewer catastrophic jumps.",
      "nadam": "Nesterov-accelerated Adam - Adds Nesterov momentum on top of Adam's adaptive scaling. Shares the same betas and epsilon but performs a lookahead gradient evaluation, which can tighten convergence on smooth objectives. Plan for a modest compute overhead per step. Recommended when Adam converges but plateaus early; tune learning_rate slightly lower than plain Adam to avoid overshooting (e.g., 1e-4 instead of 3e-4).",
      "radam": "Rectified Adam - Adam with an automatic warmup mechanism derived from variance rectification. Eliminates the need for a manual warmup schedule by shrinking step sizes until running variance stabilizes. Hyperparameters match Adam defaults. Leverage it when you need adaptive behavior but your training is sensitive to the first few hundred steps. Works well for small datasets where manual warmup would overfit.",
      "rmsprop": "RMSprop Optimizer - Maintains an exponential average of squared gradients (alpha) to normalize updates. Defaults to alpha=0.99 and eps=1e-8. Historically popular for recurrent networks and reinforcement learning, it still performs well when gradients oscillate heavily and Adam feels too aggressive. Pair it with a decaying learning_rate schedule; typical starting values land near 1e-3 with momentum disabled or set low (≤0.1).",
      "rprop": "Resilient Backpropagation - Sign-based optimizer that adapts per-parameter step sizes using only gradient sign flips. Ignores batch size because it assumes full-batch updates, so it is rarely appropriate for mini-batch CNN training. Only use it in deterministic settings (e.g., small datasets with full-batch passes) where you want quick second-order-like convergence without storing a Hessian. Hyperparameters eta_plus (1.2) and eta_minus (0.5) govern step adaptation.",
      "adagrad": "Adagrad Optimizer - Accumulates squared gradients, shrinking the learning rate for frequently updated weights. Almost maintenance-free on sparse features, but the cumulative sum forces the effective learning rate toward zero on long runs. Use it for feature embeddings or classical sparse NLP problems, not for deep CNNs that train for hundreds of epochs. Typical initial learning_rate is 1e-2 with epsilon around 1e-10 to avoid division-by-zero.",
      "adadelta": "Adadelta Optimizer - Fixes Adagrad's vanishing learning rate by tracking a moving window of squared gradients and updates. Requires almost no manual tuning beyond rho (0.9) and eps (1e-6). Works on noisy objectives where Adam may be too aggressive, though its final accuracy often trails AdamW. Prefer it when you must avoid manual learning rate schedules and still need adaptive behavior.",
      "sparse_adam": "Sparse Adam - Adam with updates applied only to indices that receive gradients, reducing memory and compute for embedding tables. Uses the same hyperparameters as Adam but assumes gradients are zero almost everywhere. Essential for NLP models with huge vocabularies. Skip it for dense convolutional models; the sparse update bookkeeping just wastes time.",
      "lbfgs": "L-BFGS Optimizer - Limited-memory quasi-Newton method that approximates the inverse Hessian using past gradients. Requires full-batch gradients and a line search per step, so you must implement a closure that recomputes loss and gradients. Excellent for fine-tuning small models or solving convex problems to high precision. Not viable for large mini-batch training because every step is expensive and memory grows with history size (max_iter and history_size control it).",
      "asgd": "Averaged SGD - Maintains a running average of parameters to dampen oscillations caused by noisy gradients. You still tune the base SGD learning_rate, but averaging kicks in after the averaging_start epoch to smooth convergence. Consider it when plain SGD wobbles at the end of training yet you want to avoid switching to Adam. Works best with constant or slowly decaying learning rates and momentum turned off."
    },
    "training_scheduler_type_enum_descriptor": {
      "step_lr": "Step Learning Rate Scheduler - Multiplies the learning rate by gamma every step_size epochs. Perfect when you already know the epochs where progress slows (e.g., 30/60/90 on ImageNet). Choose gamma between 0.1 and 0.3 and align step_size with your total epoch budget. Without prior knowledge it can feel abrupt, so monitor validation metrics to confirm the drops are helping.",
      "multi_step_lr": "Multi-Step Learning Rate Scheduler - Generalized step schedule that accepts a list of milestone epochs. Lets you stage multiple rate drops at arbitrary points, which is ideal for porting schedules from papers or previous experiments. Keep gamma identical across milestones unless you have a reason to vary it, and make sure milestones are strictly increasing integers.",
      "exponential_lr": "Exponential Learning Rate Scheduler - Applies lr_t = lr_0 * gamma^t, giving you smooth decay in exchange for careful gamma tuning. Works for very long runs where you want a gradual glide instead of discrete jumps. Typical gamma values sit between 0.97 and 0.995 for per-epoch updates. Combine with warmup if the initial slope is too steep for your model.",
      "cosine_annealing_lr": "Cosine Annealing Learning Rate Scheduler - Sweeps the learning rate down following a cosine curve over T_max epochs and optionally restarts at eta_min. Provides gentle landings that boost final accuracy on vision models. Set T_max to the number of epochs in a cycle and eta_min to a small floor such as lr_0 / 100. Use it when you want automatic fine-tuning near the end without manual milestones.",
      "cosine_annealing_warm_restarts": "Cosine Annealing with Warm Restarts - Repeats cosine decay cycles, resetting to the initial learning rate after each cycle. Great for escaping shallow minima during long training sessions. T_0 defines the first cycle length, and T_mult scales subsequent cycle lengths. Keep eta_min small but non-zero to avoid freezing the optimizer.",
      "reduce_lr_on_plateau": "Reduce Learning Rate on Plateau - Watches a metric (usually validation loss) and drops the learning rate by factor when improvement stalls for patience epochs. Essential when you cannot predict plateau timing. Configure cooldown to avoid consecutive triggers and use threshold to filter noisy metrics. Gamma between 0.1 and 0.5 typically strikes the right balance.",
      "cyclic_lr": "Cyclic Learning Rate Scheduler - Cycles the learning rate between base_lr and max_lr over short windows, optionally shrinking amplitude using mode. Useful for fast convergence on tough objectives or for LR range tests. Set step_size_up/down to the number of iterations per half-cycle; keep max_lr roughly 3-10× base_lr. Pair with momentum cycling if you enable cycle_momentum.",
      "one_cycle_lr": "One Cycle Learning Rate Policy - Single sweep that ramps learning rate up to max_lr then anneals to a fraction of the base value while inverting momentum. Delivers rapid convergence when total training steps are known. Provide either total_steps or (epochs × steps_per_epoch); set pct_start to define the warmup proportion (0.3 is common). Works best with SGD or AdamW and expects no additional schedulers.",
      "polynomial_lr": "Polynomial Learning Rate Scheduler - Decays learning rate to zero following (1 - t/T)^power. Choose total_iters as the number of optimizer steps in the schedule and power to control curvature (1 for linear, 2 for quadratic). Useful for segmentation and detection workloads where you want a deterministic glide to zero by the final iteration.",
      "linear_lr": "Linear Learning Rate Scheduler - Simple linear interpolation between start_factor and end_factor over total_iters steps. Ideal for warmup (start_factor < 1) or cool-down phases. Keep total_iters aligned with the number of iterations you want the ramp to cover; combine with another scheduler for the remaining training window.",
      "lambda_lr": "Lambda Learning Rate Scheduler - Direct hook that multiplies the base learning rate by your custom lambda(epoch) function. Gives full control for research schedules or curriculum learning. Provide a Python expression that evaluates to a float; remember it will be string-evaluated inside the training process. Validate the function carefully—syntax errors or negative outputs will kill your run.",
      "multiplicative_lr": "Multiplicative Learning Rate Scheduler - Similar to lambda_lr but expects a callable that returns a multiplier each step, often used for epoch-by-epoch scaling. Supply a lambda that depends on optimizer step count rather than epoch if you need per-iteration control. Keep multipliers positive and bounded; values >1 grow the learning rate and can destabilize training fast."
    },
    "training_loss_type_enum_descriptor": {
      "cross_entropy": "Cross-Entropy Loss - Softmax + negative log-likelihood in one call. The go-to choice for single-label classification. Accepts raw logits, handles class imbalance via weight or label_smoothing, and provides calibrated probabilities. Keep reduction='mean' for stable gradients and monitor label_smoothing so you do not erase minority classes.",
      "nll_loss": "Negative Log-Likelihood Loss - Same math as cross-entropy but expects you to call log_softmax yourself. Useful when the model already outputs log-probabilities (e.g., custom temperature scaling or mixed precision under manual control). Make sure inputs are log probabilities; feeding raw logits will silently give garbage.",
      "bce_loss": "Binary Cross-Entropy Loss - Works on probabilities in [0,1], so pair it with an explicit sigmoid. Suitable for binary classification when you need to control the activation separately. Beware of numerical underflow on extreme logits—clip the inputs or switch to BCEWithLogitsLoss if you see NaNs.",
      "bce_with_logits": "Binary Cross-Entropy with Logits - Numerically stable BCE that applies sigmoid internally. Default option for multi-label classification and binary tasks. Supports pos_weight for class imbalance without manual weighting hacks. Outputs unbounded loss if you forget to clamp targets to {0,1}.",
      "multi_margin": "Multi-Class Margin Loss - Margin-based classification objective (hinge-style) that pushes the correct class score above others by at least margin. Offers optional L1 or L2 norms via parameter p. Use it when you want large-margin behavior instead of probabilistic cross-entropy, but note that it can converge slower without careful learning rate control.",
      "multi_label_margin": "Multi-Label Margin Loss - Extends margin loss to multi-label problems by ranking positive classes ahead of negatives. Requires targets to be encoded as index lists and therefore is tricky to integrate with dense label tensors. Reserve it for research scenarios that explicitly call for margin ranking in multi-label space.",
      "multi_label_soft_margin": "Multi-Label Soft Margin Loss - Applies a soft-margin formulation over sigmoid activations, producing smoother gradients than hard margin losses. Better at handling overlapping labels and imbalance than vanilla BCE. Targets must still be {0,1}; consider threshold tuning at inference to exploit the smoother training landscape.",
      "mse_loss": "Mean Squared Error Loss - Classic L2 regression penalty. Penalizes large errors quadratically, which magnifies the impact of outliers. Great for autoencoders and low-noise regression, but consider clipping extreme targets or swapping to Huber when you see gradient explosions.",
      "l1_loss": "L1 Loss (Mean Absolute Error) - Linear penalty on absolute error, offering robustness to outliers at the cost of slower convergence near zero. Use it when you need median-like behavior or when your evaluation metric is MAE. Gradients are constant magnitude, so combine with smooth schedulers to avoid jitter.",
      "smooth_l1": "Smooth L1 Loss - Huber-style loss with a beta region that behaves like L2 near zero and L1 outside. Default choice for bounding-box regression (beta ≈ 1). Tune beta if your scale differs significantly; smaller beta tightens the quadratic window and gives sharper penalties to mid-sized errors.",
      "huber_loss": "Huber Loss - Similar to SmoothL1 but parameterized by delta instead of beta. Offers explicit control over the switch point between quadratic and linear penalties. Excellent for regression tasks with occasional outliers; set delta close to your expected noise standard deviation.",
      "kl_div": "Kullback-Leibler Divergence Loss - Measures divergence between a predicted distribution and a target distribution. Requires log-probabilities as input and raw probabilities as target by default (or vice versa with log_target). Essential for knowledge distillation and variational models. Double-check reduction mode; 'batchmean' preserves KL theory (summing over classes and averaging over batch).",
      "margin_ranking": "Margin Ranking Loss - Operates on pairs of scores (x1, x2) with ground-truth ordering y ∈ {−1, 1}. Trains the model to rank x1 above x2 by at least margin when y=1. Combine it with careful sampling of positive/negative pairs or triplets—random pairs rarely convey useful signal.",
      "hinge_embedding": "Hinge Embedding Loss - For similarity learning where labels indicate whether pairs should be close (+1) or far (−1). Penalizes distances that violate the specified margin. Use it when you only have binary same/different supervision and want embeddings clustered accordingly.",
      "triplet_margin": "Triplet Margin Loss - Consumes anchor, positive, and negative embeddings and enforces a margin between positive and negative distances. Requires hard or semi-hard triplet mining to shine; naive random triplets usually waste computation. Margin defaults to 1.0 but tune it based on embedding scale (smaller for normalized vectors).",
      "cosine_embedding": "Cosine Embedding Loss - Optimizes cosine similarity directly, emphasizing angular distance over magnitude. Ideal when vectors are normalized or when direction carries the semantics (e.g., face recognition). Ensure embeddings are normalized to avoid mixing magnitude effects back in.",
      "ctc_loss": "Connectionist Temporal Classification Loss - Aligns variable-length inputs to target label sequences without frame-level annotation. Requires log-probabilities with size (T, N, C) and target sequences without blanks inserted (the loss handles blanks). Configure blank index and ensure targets are sorted by sample; mis-sized target lengths will throw runtime errors.",
      "poisson_nll": "Poisson Negative Log-Likelihood Loss - For modeling count data where targets are non-negative integers. Accepts log_input to enforce positive predictions or full logits with clamp to stay above zero. Set full=True if your model predicts raw rates. Do not feed negative targets; the distribution assumption breaks immediately.",
      "gaussian_nll": "Gaussian Negative Log-Likelihood Loss - Trains a model to output both mean and variance for continuous targets. Expects the model to return (mean, variance) tensors. Supports full covariance via cholesky_factor; otherwise variance must stay positive. Great for uncertainty-aware regression; add a small epsilon to variance to avoid log(0) issues."
    },
    "training_loss_reduction_enum_descriptor": {
      "mean": "Mean Reduction - Computes average loss across all batch elements by dividing total loss by batch size. Affects gradient magnitude normalization, batch size independence, training stability, and learning rate sensitivity. Controls loss scaling to provide consistent gradients regardless of batch size variations. Standard choice for most training scenarios as it maintains gradient magnitudes proportional to individual sample errors rather than batch size.",
      "sum": "Sum Reduction - Computes total loss by summing all individual sample losses in the batch without normalization. Affects gradient magnitude scaling, batch size dependency, learning rate requirements, and training dynamics. Controls loss accumulation that results in larger gradients for bigger batches, requiring learning rate adjustment proportional to batch size. Useful when you want gradient magnitude to scale with the number of samples processed.",
      "none": "No Reduction - Returns individual loss values for each sample in the batch without any aggregation operation. Affects custom loss weighting capabilities, sample-specific analysis, manual loss combination, and advanced training strategies. Controls individual sample loss access for implementing custom reduction schemes, sample importance weighting, or detailed loss analysis. Essential for advanced applications requiring per-sample loss manipulation."
    },
    "training_early_stopping_monitor_enum_descriptor": {
      "val_loss": "Validation Loss Monitoring - Early stopping mechanism that tracks validation loss values to determine when training should halt due to lack of improvement. Affects overfitting prevention, training duration optimization, model generalization quality, and computational resource usage. Controls training termination based on loss plateauing, which typically indicates the model has learned the generalizable patterns and further training may lead to overfitting. Particularly effective for regression tasks and situations where loss minimization directly correlates with model quality.",
      "val_accuracy": "Validation Accuracy Monitoring - Early stopping mechanism that tracks validation accuracy metrics to determine optimal training termination point. Affects model performance optimization, overfitting detection, training efficiency, and final model quality. Controls training halt based on accuracy plateaus, focusing on classification performance rather than loss minimization. Most suitable for balanced classification tasks where accuracy is the primary success metric and correlates well with model generalization capability."
    },
    "optimizers_defaults_lbfgs_line_search_fn_oneOf[1]_enum_descriptor": {
      "strong_wolfe": "Strong Wolfe Line Search - Advanced line search algorithm for L-BFGS optimization that ensures both sufficient decrease (Armijo condition) and curvature conditions (strong Wolfe conditions). Affects optimization convergence quality by guaranteeing appropriate step sizes that satisfy mathematical optimality criteria. Controls step length selection through rigorous mathematical conditions that ensure convergence properties while maintaining computational efficiency. Essential for L-BFGS theoretical guarantees and provides robust step size selection for quasi-Newton optimization methods."
    },
    "schedulers_defaults_reduce_lr_on_plateau_mode_enum_descriptor": {
      "min": "Minimum Mode - Monitors metrics where lower values indicate better performance (such as validation loss). Affects learning rate reduction trigger by tracking when monitored metric stops decreasing below the threshold for the specified patience period. Controls scheduler behavior to reduce learning rate when loss plateaus, preventing training stagnation. Optimal for loss-based monitoring where decreasing values represent training progress.",
      "max": "Maximum Mode - Monitors metrics where higher values indicate better performance (such as validation accuracy). Affects learning rate reduction trigger by tracking when monitored metric stops increasing above the threshold for the specified patience period. Controls scheduler behavior to reduce learning rate when accuracy plateaus, enabling further fine-tuning. Optimal for accuracy-based monitoring where increasing values represent training progress."
    },
    "schedulers_defaults_reduce_lr_on_plateau_threshold_mode_enum_descriptor": {
      "rel": "Relative Threshold Mode - Defines improvement threshold as a percentage of the current best metric value. Affects sensitivity to metric improvements by requiring proportional changes relative to current performance level. Controls adaptive threshold scaling that becomes more stringent as model performance improves. Useful when improvement magnitude should scale with current metric values, preventing premature learning rate reduction in high-performing models.",
      "abs": "Absolute Threshold Mode - Defines improvement threshold as a fixed absolute value that must be exceeded regardless of current metric level. Affects improvement detection sensitivity through constant threshold requirements independent of current performance. Controls uniform improvement standards throughout training regardless of metric magnitude. Useful when consistent improvement levels are required regardless of current model performance state."
    },
    "schedulers_defaults_cyclic_lr_mode_enum_descriptor": {
      "triangular": "Triangular Cycle Mode - Creates basic triangular learning rate cycles with constant amplitude throughout training. Affects learning rate oscillation pattern through linear increases and decreases between base_lr and max_lr boundaries. Controls consistent exploration-exploitation balance with fixed learning rate range. Provides simple cyclic learning rate patterns suitable for finding optimal learning rate ranges without decay.",
      "triangular2": "Triangular2 Cycle Mode - Creates triangular learning rate cycles with amplitude halving after each complete cycle. Affects learning rate range reduction over time while maintaining triangular oscillation pattern. Controls gradual learning rate decay within cyclical framework, combining benefits of cycling with progressive refinement. Enables aggressive initial exploration with increasingly conservative learning rate adjustments.",
      "exp_range": "Exponential Range Mode - Scales learning rate cycle amplitude exponentially using gamma factor for dynamic range adjustment. Affects learning rate bound modification through exponential scaling of max_lr relative to cycle number. Controls sophisticated amplitude evolution that can increase or decrease cycle magnitude based on gamma value. Provides advanced cyclic learning rate patterns with exponential amplitude modulation."
    },
    "schedulers_defaults_cyclic_lr_scale_mode_enum_descriptor": {
      "cycle": "Cycle-based Scaling Mode - Applies scaling function based on completed cycle count rather than individual iteration steps. Affects scale function evaluation frequency and learning rate amplitude modification rhythm. Controls scaling application at cycle boundaries, enabling different amplitude adjustments for each complete learning rate cycle. Useful when scaling behavior should change discretely between cycles rather than continuously throughout training.",
      "iterations": "Iteration-based Scaling Mode - Applies scaling function based on total iteration count since training start, providing continuous scaling evolution. Affects scale function evaluation at every step, enabling smooth amplitude transitions throughout training process. Controls fine-grained scaling application that evolves continuously rather than at discrete cycle boundaries. Useful when gradual, continuous scaling changes are preferred over step-wise cycle-based adjustments."
    },
    "schedulers_defaults_one_cycle_lr_anneal_strategy_enum_descriptor": {
      "cos": "Cosine Annealing Strategy - Uses cosine function for smooth learning rate transitions with gradual changes at extremes and steeper changes in middle regions. Affects learning rate trajectory smoothness by providing natural acceleration and deceleration phases. Controls sinusoidal learning rate evolution that mimics natural optimization dynamics. Particularly effective for achieving smooth convergence with reduced oscillations near learning rate boundaries.",
      "linear": "Linear Annealing Strategy - Uses linear interpolation for constant rate learning rate changes throughout the cycle. Affects learning rate transitions through uniform progression without acceleration or deceleration phases. Controls predictable, steady learning rate evolution with consistent change rate. Simpler alternative when smooth cosine transitions are not required and uniform learning rate progression is preferred."
    },
    "losses_defaults_multi_margin_p_enum_descriptor": {
      "1": "L1 Norm (Manhattan Distance) - Uses absolute differences for margin calculation in multi-margin loss function. Affects loss computation through linear penalty that treats all errors uniformly regardless of magnitude. Controls distance measurement using sum of absolute differences between predicted and target values. Provides robust margin calculation less sensitive to outliers compared to L2 norm, making it suitable when training data contains significant noise or extreme values.",
      "2": "L2 Norm (Euclidean Distance) - Uses squared differences for margin calculation in multi-margin loss function. Affects loss computation through quadratic penalty that heavily penalizes larger errors while being lenient on smaller ones. Controls distance measurement using sum of squared differences between predicted and target values. Provides smooth gradient characteristics and strong penalty for large margin violations, making it suitable for clean data where large errors should be heavily discouraged."
    },
    "losses_defaults_kl_div_reduction_enum_descriptor": {
      "none": "No Reduction - Returns individual KL divergence values for each sample without aggregation. Affects loss output dimensionality by preserving per-sample loss values for custom processing or analysis. Controls individual sample loss access enabling sample-specific weighting, filtering, or detailed loss examination. Essential for advanced training strategies requiring per-sample loss manipulation or when implementing custom reduction schemes.",
      "mean": "Mean Reduction - Computes average KL divergence across all elements in the batch including spatial dimensions. Affects gradient scaling by normalizing loss magnitude relative to total number of elements rather than batch size alone. Controls loss scaling that accounts for both batch size and spatial dimensions in dense prediction tasks. Provides consistent gradients regardless of input resolution or batch composition.",
      "sum": "Sum Reduction - Computes total KL divergence by summing all individual element divergences without normalization. Affects gradient magnitude scaling proportionally to total number of elements in batch and spatial dimensions. Controls loss accumulation that results in larger gradients for bigger batches or higher resolution inputs. Requires careful learning rate adjustment when batch sizes or input dimensions vary significantly.",
      "batchmean": "Batch Mean Reduction - Computes mean KL divergence over batch dimension only, preserving spatial dimension contributions. Affects loss computation by averaging across samples while maintaining full spatial loss contribution. Controls standard KL divergence reduction that focuses on sample-wise averaging rather than element-wise normalization. Recommended reduction method for KL divergence loss as it preserves theoretical properties while providing stable training dynamics."
    },
    "models_resnet_default_optimizer_type_enum_descriptor": {
      "adamw": "AdamW Optimizer for ResNet - Adam with decoupled weight decay specifically tuned for ResNet architectures. Affects regularization effectiveness and training stability through proper separation of gradient-based adaptation and L2 penalty. Controls weight decay independently from gradient updates, preventing regularization interference with adaptive learning rates. Recommended default choice for ResNet models due to superior generalization performance and stable training characteristics across various ResNet depths and datasets.",
      "adam": "Adam Optimizer for ResNet - Classic adaptive moment estimation algorithm providing automatic learning rate scaling for ResNet training. Affects convergence speed and hyperparameter sensitivity through per-parameter learning rate adaptation. Controls momentum and squared gradient estimates to balance exploration and exploitation during ResNet optimization. Good general-purpose choice offering reliable performance across different ResNet variants with minimal hyperparameter tuning requirements.",
      "sgd": "SGD with Momentum for ResNet - Traditional stochastic gradient descent with momentum specifically configured for ResNet training. Affects training dynamics through momentum accumulation and requires careful learning rate scheduling for optimal performance. Controls parameter updates through momentum-based acceleration while maintaining deterministic optimization behavior. Traditional choice that achieves excellent results with proper tuning but requires more careful hyperparameter selection compared to adaptive optimizers."
    },
    "models_resnet_default_scheduler_type_enum_descriptor": {
      "step_lr": "Step Learning Rate for ResNet - Step-based learning rate decay with predetermined milestone epochs optimized for ResNet training phases. Affects learning rate reduction at specific training stages corresponding to ResNet convergence patterns. Controls deterministic learning rate schedule that aligns with typical ResNet training progression and loss landscape characteristics. Suitable when optimal decay epochs are known from prior ResNet experiments or research papers with similar datasets and architectures.",
      "cosine_annealing_lr": "Cosine Annealing for ResNet - Smooth cosine-based learning rate schedule that often improves ResNet final accuracy through gradual learning rate reduction. Affects training dynamics by providing smooth transitions that help ResNet models achieve better final convergence. Controls sinusoidal learning rate progression that reduces training oscillations and enables fine-tuned parameter adjustment in later training phases. Frequently achieves superior final accuracy compared to step-based schedules for ResNet architectures.",
      "reduce_lr_on_plateau": "Adaptive Scheduling for ResNet - Plateau-based learning rate reduction that automatically responds to ResNet training stagnation periods. Affects learning rate adaptation through validation metric monitoring, reducing learning rate when ResNet training progress plateaus. Controls automatic schedule adjustment that responds to actual training dynamics rather than predetermined milestones. Optimal for ResNet training when optimal decay timing is unknown or when training characteristics vary across different datasets or experimental conditions."
    },
    "paths_description": "Paths configuration",
    "paths_projects_dir_description": "Directory containing project folders",
    "paths_ui_dir_description": "Directory containing UI assets",
    "paths_config_dir_description": "Directory containing configuration files",
    "paths_localizations_dir_description": "Directory containing localization files",
    "paths_packages_file_description": "Path to packages.jsonc file",
    "paths_mappings_file_description": "Path to mappings file",
    "paths_cache_dir_description": "Directory for cache files"
  },
  "status_graph": {
    "epoch_accuracy": "Epoch Accuracy",
    "epoch_loss": "Epoch Loss",
    "step_loss": "Step Loss",
    "learning_rate": "Learning Rate",
    "loss": "Loss",
    "no_data": "Waiting for updates",
    "no_training": "No active training.",
    "active_count": "Active trainings: {count}",
    "label_training_id": "Training ID",
    "label_status": "Status",
    "label_phase": "Phase",
    "label_epoch": "Epoch",
    "label_step": "Step",
    "badge_training": "Training: {project}",
    "footer_training": "Training {project} — Epoch {epoch} • Step {step}"
  },
  "updates": {
    "log": {
      "check_started": "Checking upstream checksums...",
      "check_complete": "Update check complete. Pending files: {count}",
      "check_failed": "Update check failed: {error}",
      "remote_config_failed": "Failed to download remote config.json: {error}",
      "remote_checksum_failed": "Failed to download remote checksum manifest: {error}",
      "remote_payload_invalid": "Remote payload from {url} was not a mapping.",
      "local_checksum_missing": "Local checksum.json missing; assuming empty manifest.",
      "local_checksum_invalid": "Failed to parse local checksum.json: {error}",
      "path_escape": "Blocked unsafe path {path}",
      "apply_started": "Applying updates...",
      "apply_failed": "Failed to apply updates: {error}",
      "apply_nothing": "No updates required.",
      "apply_file_success": "Updated {path}",
      "apply_file_failed": "Failed to update {path}: {error}",
      "apply_partial": "Applied {updated} updates with {failed} failures.",
      "apply_complete": "Applied {count} updates."
    },
    "api": {
      "check_success": "Update check completed. {count} file(s) pending.",
      "check_no_updates": "Everything is already up to date.",
      "check_failed": "Update check failed: {error}",
      "apply_success": "Updates applied successfully. {updated} file(s) updated.",
      "apply_partial": "Updates applied with {updated} success and {failed} failure(s).",
      "apply_failed": "Failed to apply updates: {error}",
      "apply_nothing": "No updates were necessary."
    },
    "status": {
      "missing": "Missing locally",
      "outdated": "Checksum mismatch"
    }
  },
  "status": {
    "project_load_failed": "Carregamento do projeto falhou",
    "project_loading": "Carregando projeto {projectName}...",
    "project_loaded_custom": "Projeto {projectName} carregado com configuração personalizada",
    "project_loaded_defaults": "Projeto {projectName} carregado com padrões globais",
    "project_load_error": "Erro ao carregar projeto {projectName}: {error}",
    "no_project_loaded": "Nenhum projeto carregado",
    "validation_errors": "Corrija erros de validação antes de salvar",
    "saving_training_config": "Salvando configuração de treinamento...",
    "training_config_saved": "Configuração de treinamento salva",
    "save_failed": "Salvamento falhou",
    "loading_schema": "Carregando esquema & configuração...",
    "init_failed": "Init falhou",
    "memory_load_failed": "Carregamento de memória falhou",
    "checking_updates": "Verificando atualizações...",
    "updates_ready": "Atualizações disponíveis",
    "updates_none": "Nenhuma atualização disponível",
    "updates_check_failed": "Verificação de atualizações falhou",
    "updates_applying": "Aplicando atualizações...",
    "updates_applied": "Atualizações aplicadas com sucesso",
    "updates_apply_failed": "Aplicação de atualizações falhou",
    "generating_heatmap": "Gerando heatmap...",
    "heatmap_generated": "Heatmap gerado",
    "heatmap_generation_failed": "Geração de heatmap falhou",
    "saving_system_settings": "Salvando configurações do sistema...",
    "system_settings_saved": "Configurações do sistema salvas",
    "starting_training": "Iniciando treinamento...",
    "training_started": "Treinamento iniciado",
    "training_stopping": "Parando treinamento...",
    "training_stop_requested": "Parada de treinamento solicitada",
    "training_stop_failed": "Parada de treinamento falhou",
    "training_start_failed": "Iniciação de treinamento falhou",
    "switching_language": "Trocando idioma...",
    "language_switched": "Idioma alterado com sucesso",
    "language_switch_failed": "Troca de idioma falhou",
    "augmentation_preview_ready": "Pré-visualização de aumento gerada"
  }
}
